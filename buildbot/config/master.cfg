# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import sys
sys.path.append('scripts/common')
sys.path.append('scripts/master')

def slave_password():
  return open('slavepasswd').read().strip()

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# TODO: Define your builders and assign slaves and scripts to them.
builder_map = {
  'pcre-fuzzer': ('slave1', 'pcre_fuzzer.sh'),
}

builders = sorted(set(builder_map.iterkeys()))
slaves = sorted(set(slave for (slave, script) in builder_map.itervalues()))

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave(slave, slave_password(), max_builds=1)
               for slave in slaves]

c['slavePortnum'] = 9991

####### CHANGESOURCES

# TODO: Set up a GitPoller or an SVNPoller for your project's repo. This
# will trigger the bot on new commits.

#from buildbot.changes.gitpoller import GitPoller
#git_poller = GitPoller(
#                   repourl='git://yourproject.org/repo.git',
#                   pollinterval=600, # seconds
#                   workdir='gitpoller-workdir',
#)
#c['change_source'] = git_poller

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
svn_poller = SVNPoller(svnrul='svn://vcs.exim.org/pcre2/code/trunk',
                       pollinterval=600, # seconds
                       split_file=split_file_branches)
c['change_source'] = svn_poller

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import *

c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(name='all', branch='master',
                                             treeStableTimer=60,
                                             builderNames=builders))
c['schedulers'].append(ForceScheduler(
                            name='force',
                            builderNames=builders))

####### BUILDERS

from AnnotatedFactory import getAnnotatedFactory
from buildbot.config import BuilderConfig

c['builders'] = [BuilderConfig(name = builder,
                               slavename = slave,
                               factory = getAnnotatedFactory(slave_script=script),
                               )
                 for builder, (slave, script) in builder_map.iteritems()]

####### STATUS TARGETS

c['status'] = []

from buildbot.status.html import WebStatus
from buildbot.status.web import authz, auth

# TODO: Set up a username/password to authenticate to the master's web
# interface.
auth_user = 'user'
auth_pw = 'password'
#auth_pw = open('authpasswd').read().strip()

authz_cfg = authz.Authz(
    auth=auth.BasicAuth([(auth_user, auth_pw)]),
    gracefulShutdown = False,
    forceBuild = 'auth',
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False
)
webstatus = WebStatus(http_port=8080, authz=authz_cfg)
c['status'].append(webstatus)


####### PROJECT IDENTITY

# TODO: fill in your project's info
c['projectName'] = 'pcre fuzzing'
c['projectURL'] = 'http://127.0.0.1'
c['buildbotURL'] = 'http://127.0.0.1:8080/'

####### DB URL
c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
